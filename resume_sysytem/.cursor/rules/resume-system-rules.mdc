---
description: 
globs: 
alwaysApply: true
---
## 一、项目基本规范

### 1. 开发指南

- 开发时必须实时创建或更新`xxx模块开发指南.md`
- `xxx模块开发指南.md`需包含模块的目录结构,功能说明,开发进度
- `xxx模块开发指南.md`放在resource目录下 

### 2. 技术栈

- **Java**: JDK 1.8
- **Maven**: 3.6.3
- **Spring Boot**: 2.7.14
- **Spring Cloud**: 2021.0.8
- **Spring Cloud Alibaba**: 2021.0.4.0
- **MySQL**: 8.0.28
- **MyBatis Plus**: 3.5.2
- **Redis**: 6.0+
- **RabbitMQ**: 3.8+
- **Nacos**: 服务注册、配置中心
- **Gateway**: API网关
- **Feign**: 声明式HTTP客户端
- **Sentinel**: 流量控制、熔断降级
- **JWT**: 0.11.5认证授权
- **MinIO**: 对象存储，用于存储模板文件
- **Hutool**: 5.8.26 工具库
- **Druid**: 1.2.8 数据库连接池
- **Swagger**: 2.0.9 接口文档管理
- **Lombok**:  1.18.26 简化Java代码编写


## 二、编码规范

### 1. 代码风格

- 严格遵循阿里巴巴Java开发手册
- 缩进使用4个空格，不使用Tab
- 换行符使用CRLF
- 所有文件使用UTF-8编码

### 2. 命名规范

- **类命名**：
  - 控制器：`XxxController`
  - 服务接口：`XxxService`
  - 服务实现：`XxxServiceImpl`
  - 数据访问：`XxxMapper`
  - 实体类：`XxxEntity`
  - 数据传输对象：`XxxDTO`
  - 视图对象：`XxxVO`
  - 查询对象：`XxxQuery`
  - 配置类: `XxxConfig`

- **方法命名**：
  - 获取单个对象：`getXxx`
  - 获取多个对象：`listXxx`
  - 统计数量：`countXxx`
  - 新增：`addXxx`
  - 修改：`updateXxx`
  - 删除：`deleteXxx`
  - 检查：`checkXxx`

- **变量命名**：
  - 常量：全大写，下划线分隔（如`MAX_COUNT`）
  - 变量：驼峰命名（如`userId`）



### 4. 注释规范

- 类注释必须包含：功能描述
- 方法注释必须包含：功能描述、参数说明、返回值说明、异常说明（如有）
- 接口方法必须有完整的Javadoc注释
- 复杂逻辑必须有详细注释说明

### 5. 异常处理规范

- 使用统一的异常处理机制
- 业务异常继承自`BaseException`
- 不允许吞掉异常，必须记录日志
- 禁止直接抛出`RuntimeException`，应使用自定义业务异常

## 三、微服务开发规范

### 1. 服务划分原则

- 按照业务领域划分服务
- 单一职责原则：一个服务只负责一个业务领域
- 服务粒度适中，避免过大或过小

### 2. 接口设计规范

- 严格遵循RESTful风格
- URL路径采用名词复数形式
- 使用正确的HTTP方法：GET(查询)、POST(创建)、PUT(更新)、DELETE(删除)
- 使用统一的响应格式
- 开发API时参考`api.mdc`

### 3. 数据传输规范

- DTO与实体类严格分离
- 不同层次间的数据对象不能跨层使用
- 使用统一的响应格式：`R<T>`
- 接口参数必须进行校验，使用`@Valid`和校验注解

### 4. 服务间通信规范

- 使用Feign进行服务间调用
- Feign接口必须定义在API模块中
- 服务降级必须实现FallbackFactory
- 消息队列使用场景：异步处理、削峰填谷、解耦

## 四、数据库规范

### 1. 表设计规范

- 表名采用小写字母，下划线分隔
- 必须有主键，推荐使用自增长ID
- 每个表必须包含：`create_time`、`update_time`字段
- 字段名采用小写字母，下划线分隔
- 字段必须有注释说明

### 2. SQL编写规范

- 使用预编译方式防止SQL注入
- 表名、字段名使用反引号`\``包裹
- 复杂查询必须有注释说明
- 禁止使用`SELECT *`，必须明确指定字段
- 使用命名参数，而非位置参数

### 3. ORM规范

- 统一使用MyBatis Plus框架
- 实体类使用`@TableName`、`@TableId`等注解
- 尽量使用Lambda方式编写条件
- 复杂查询使用XML配置

## 六、安全规范

### 1. 认证授权

- 使用JWT进行认证
- 敏感接口必须进行权限校验
- Token过期时间不超过24小时
- 敏感数据（如密码）必须加密存储

## 七、日志规范

### 1. 日志配置

- 开发环境：控制台输出，级别DEBUG

### 2. 日志内容

- 必须记录用户ID、操作类型、时间戳
- 异常必须记录完整的堆栈信息
- 重要业务操作必须记录详细日志


## 数据库设计

### 用户模块

# 用户表
CREATE TABLE `users` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `username` varchar(50) NOT NULL COMMENT '用户名',
  `password` varchar(100) NOT NULL COMMENT '密码',
  `email` varchar(100) NOT NULL COMMENT '邮箱',
  `phone` varchar(20) DEFAULT NULL COMMENT '手机号',
  `avatar` varchar(255) DEFAULT NULL COMMENT '头像',
  `role` tinyint NOT NULL DEFAULT '0' COMMENT '角色：0-普通用户，1-VIP用户，2-管理员',
  `status` tinyint NOT NULL DEFAULT '1' COMMENT '状态：0-禁用，1-正常',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_username` (`username`),
  UNIQUE KEY `uk_email` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户表';

#-- 用户详情表
CREATE TABLE `user_details` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '用户ID',
  `real_name` varchar(50) DEFAULT NULL COMMENT '真实姓名',
  `gender` tinyint DEFAULT NULL COMMENT '性别：0-未知，1-男，2-女',
  `birthday` date DEFAULT NULL COMMENT '生日',
  `education` varchar(50) DEFAULT NULL COMMENT '学历',
  `work_years` int DEFAULT NULL COMMENT '工作年限',
  `address` varchar(255) DEFAULT NULL COMMENT '地址',
  `profile` text COMMENT '个人简介',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户详情表';

#-- VIP会员表
CREATE TABLE `vip_members` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '用户ID',
  `level` tinyint NOT NULL DEFAULT '1' COMMENT 'VIP等级',
  `start_time` datetime NOT NULL COMMENT '开始时间',
  `end_time` datetime NOT NULL COMMENT '结束时间',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  KEY `idx_user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='VIP会员表';


### 简历模块

#-- 简历表
CREATE TABLE `resumes` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '用户ID',
  `title` varchar(100) NOT NULL COMMENT '简历标题',
  `template_id` bigint DEFAULT NULL COMMENT '模板ID',
  `content` longtext COMMENT '简历内容（JSON格式）',
  `status` tinyint NOT NULL DEFAULT '0' COMMENT '状态：0-草稿，1-已完成',
  `is_default` tinyint NOT NULL DEFAULT '0' COMMENT '是否默认简历：0-否，1-是',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  KEY `idx_user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='简历表';

#-- 简历版本表
CREATE TABLE `resume_versions` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `resume_id` bigint NOT NULL COMMENT '简历ID',
  `version` int NOT NULL COMMENT '版本号',
  `content` longtext COMMENT '简历内容（JSON格式）',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_resume_version` (`resume_id`,`version`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='简历版本表';


### 模板模块

#-- 模板分类表
CREATE TABLE `template_categories` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL COMMENT '分类名称',
  `sort` int NOT NULL DEFAULT '0' COMMENT '排序',
  `status` tinyint NOT NULL DEFAULT '1' COMMENT '状态：0-禁用，1-正常',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='模板分类表';

#-- 模板表
CREATE TABLE `templates` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `category_id` bigint NOT NULL COMMENT '分类ID',
  `name` varchar(100) NOT NULL COMMENT '模板名称',
  `thumbnail` varchar(255) NOT NULL COMMENT '缩略图',
  `file_path` varchar(255) NOT NULL COMMENT '模板文件路径',
  `price` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '价格',
  `is_free` tinyint NOT NULL DEFAULT '0' COMMENT '是否免费：0-否，1-是',
  `downloads` int NOT NULL DEFAULT '0' COMMENT '下载次数',
  `description` text COMMENT '描述',
  `status` tinyint NOT NULL DEFAULT '1' COMMENT '状态：0-下架，1-上架',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  KEY `idx_category_id` (`category_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='模板表';

#-- 模板收藏表
CREATE TABLE `template_collections` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '用户ID',
  `template_id` bigint NOT NULL COMMENT '模板ID',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_user_template` (`user_id`,`template_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='模板收藏表';


### 订单模块

#-- 订单表
CREATE TABLE `orders` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `order_no` varchar(50) NOT NULL COMMENT '订单编号',
  `user_id` bigint NOT NULL COMMENT '用户ID',
  `template_id` bigint NOT NULL COMMENT '模板ID',
  `amount` decimal(10,2) NOT NULL COMMENT '订单金额',
  `pay_type` tinyint DEFAULT NULL COMMENT '支付方式：1-支付宝，2-微信',
  `status` tinyint NOT NULL DEFAULT '0' COMMENT '状态：0-待支付，1-已支付，2-已取消',
  `pay_time` datetime DEFAULT NULL COMMENT '支付时间',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_order_no` (`order_no`),
  KEY `idx_user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='订单表';

#-- 支付记录表
CREATE TABLE `payment_records` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `order_no` varchar(50) NOT NULL COMMENT '订单编号',
  `trade_no` varchar(100) DEFAULT NULL COMMENT '交易流水号',
  `pay_type` tinyint NOT NULL COMMENT '支付方式：1-支付宝，2-微信',
  `amount` decimal(10,2) NOT NULL COMMENT '支付金额',
  `status` tinyint NOT NULL COMMENT '状态：0-处理中，1-成功，2-失败',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  KEY `idx_order_no` (`order_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='支付记录表';


### 文件模块

#-- 文件表
CREATE TABLE `files` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '用户ID',
  `original_name` varchar(255) NOT NULL COMMENT '原始文件名',
  `file_name` varchar(255) NOT NULL COMMENT '存储文件名',
  `file_path` varchar(255) NOT NULL COMMENT '文件路径',
  `file_size` bigint NOT NULL COMMENT '文件大小(字节)',
  `file_type` varchar(50) NOT NULL COMMENT '文件类型',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`),
  KEY `idx_user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='文件表';


### 通知模块

CREATE TABLE `notifications` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '用户ID',
  `title` varchar(100) NOT NULL COMMENT '标题',
  `content` text NOT NULL COMMENT '内容',
  `type` tinyint NOT NULL COMMENT '类型：1-系统通知，2-订单通知，3-其他',
  `is_read` tinyint NOT NULL DEFAULT '0' COMMENT '是否已读：0-未读，1-已读',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`),
  KEY `idx_user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='通知表';
