---
description: api接口文档
globs: 
alwaysApply: false
---
# 简历系统API接口文档

## 统一响应格式

所有API接口均使用统一的响应格式：

```json
{
  "code": 200,       // 状态码：200成功，其他表示失败
  "message": "操作成功", // 消息描述
  "data": {}         // 返回数据，可能是对象、数组或null
}
```

## 错误码说明

| 错误码 | 说明 |
| ----- | ---- |
| 200 | 成功 |
| 400 | 请求参数错误 |
| 401 | 未授权 |
| 403 | 权限不足 |
| 404 | 资源不存在 |
| 500 | 服务器内部错误 |

## 1. 用户服务 (User Service)

### 1.1 用户注册

- **URL**: `/api/users/register`
- **方法**: POST
- **描述**: 注册新用户
- **请求参数**:

```json
{
  "username": "zhangsan",
  "password": "password123",
  "email": "zhangsan@example.com",
  "phone": "13800138000"
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "注册成功",
  "data": {
    "userId": 1,
    "username": "zhangsan"
  }
}
```

### 1.2 获取用户信息

- **URL**: `/api/users/{userId}`
- **方法**: GET
- **描述**: 获取用户信息
- **请求参数**: 路径参数userId
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "id": 1,
    "username": "zhangsan",
    "email": "zhangsan@example.com",
    "phone": "13800138000",
    "avatar": "http://example.com/avatar.jpg",
    "role": 0,
    "status": 1,
    "createTime": "2023-01-01 12:00:00"
  }
}
```

### 1.3 更新用户信息

- **URL**: `/api/users/{userId}`
- **方法**: PUT
- **描述**: 更新用户信息
- **请求参数**:

```json
{
  "email": "new_email@example.com",
  "phone": "13900139000",
  "avatar": "http://example.com/new_avatar.jpg"
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "更新成功",
  "data": null
}
```

### 1.4 获取用户详细信息

- **URL**: `/api/users/{userId}/details`
- **方法**: GET
- **描述**: 获取用户详细个人资料
- **请求参数**: 路径参数userId
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "id": 1,
    "userId": 1,
    "realName": "张三",
    "gender": 1,
    "birthday": "1990-01-01",
    "education": "本科",
    "workYears": 5,
    "address": "北京市朝阳区",
    "profile": "个人简介...",
    "createTime": "2023-01-01 12:00:00"
  }
}
```

### 1.5 更新用户详细信息

- **URL**: `/api/users/{userId}/details`
- **方法**: PUT
- **描述**: 更新用户详细个人资料
- **请求参数**:

```json
{
  "realName": "张三",
  "gender": 1,
  "birthday": "1990-01-01",
  "education": "硕士",
  "workYears": 6,
  "address": "上海市浦东新区",
  "profile": "新的个人简介..."
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "更新成功",
  "data": null
}
```

### 1.6 查询VIP会员状态

- **URL**: `/api/users/{userId}/vip`
- **方法**: GET
- **描述**: 查询用户VIP会员状态
- **请求参数**: 路径参数userId
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "isVip": true,
    "level": 2,
    "startTime": "2023-01-01 00:00:00",
    "endTime": "2023-12-31 23:59:59",
    "remainingDays": 300
  }
}
```

## 2. 认证服务 (Auth Service)

### 2.1 用户登录

- **URL**: `/api/auth/login`
- **方法**: POST
- **描述**: 用户登录并获取令牌
- **请求参数**:

```json
{
  "username": "zhangsan",
  "password": "password123"
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "登录成功",
  "data": {
    "userId": 1,
    "username": "zhangsan",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "expiresIn": 7200
  }
}
```

### 2.2 刷新令牌

- **URL**: `/api/auth/refresh`
- **方法**: POST
- **描述**: 刷新访问令牌
- **请求参数**:

```json
{
  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "刷新成功",
  "data": {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "expiresIn": 7200
  }
}
```

### 2.3 退出登录

- **URL**: `/api/auth/logout`
- **方法**: POST
- **描述**: 用户退出登录
- **请求参数**: 无
- **响应结果**:

```json
{
  "code": 200,
  "message": "退出成功",
  "data": null
}
```

### 2.4 修改密码

- **URL**: `/api/auth/password`
- **方法**: PUT
- **描述**: 修改用户密码
- **请求参数**:

```json
{
  "oldPassword": "password123",
  "newPassword": "newPassword456"
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "密码修改成功",
  "data": null
}
```

## 3. 简历管理服务 (Resume Service)

### 3.1 创建简历

- **URL**: `/api/resumes`
- **方法**: POST
- **描述**: 创建新简历
- **请求参数**:

```json
{
  "title": "软件工程师简历",
  "templateId": 1,
  "content": {
    "basicInfo": {
      "name": "张三",
      "phone": "13800138000",
      "email": "zhangsan@example.com"
    },
    "education": [
      {
        "school": "北京大学",
        "major": "计算机科学",
        "degree": "本科",
        "startDate": "2016-09-01",
        "endDate": "2020-07-01"
      }
    ],
    "workExperience": [
      {
        "company": "某科技公司",
        "position": "Java开发工程师",
        "startDate": "2020-07-01",
        "endDate": "2023-01-01",
        "description": "负责后端系统开发与维护..."
      }
    ],
    "skills": [
      "Java", "Spring Boot", "MySQL", "Redis"
    ]
  }
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "创建成功",
  "data": {
    "resumeId": 1
  }
}
```
## 3. 简历管理服务 (Resume Service) - 续

### 3.2 获取简历列表

- **URL**: `/api/resumes`
- **方法**: GET
- **描述**: 获取当前用户的简历列表
- **请求参数**: 
  - page: 页码(默认1)
  - size: 每页大小(默认10)
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "total": 5,
    "list": [
      {
        "id": 1,
        "title": "软件工程师简历",
        "status": 1,
        "isDefault": 1,
        "createTime": "2023-01-01 12:00:00",
        "updateTime": "2023-01-02 12:00:00"
      },
      {
        "id": 2,
        "title": "产品经理简历",
        "status": 0,
        "isDefault": 0,
        "createTime": "2023-01-03 12:00:00",
        "updateTime": "2023-01-03 12:00:00"
      }
    ]
  }
}
```

### 3.3 获取简历详情

- **URL**: `/api/resumes/{resumeId}`
- **方法**: GET
- **描述**: 获取简历详细信息
- **请求参数**: 路径参数resumeId
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "id": 1,
    "userId": 1,
    "title": "软件工程师简历",
    "templateId": 1,
    "content": {
      "basicInfo": {
        "name": "张三",
        "phone": "13800138000",
        "email": "zhangsan@example.com"
      },
      "education": [
        {
          "school": "北京大学",
          "major": "计算机科学",
          "degree": "本科",
          "startDate": "2016-09-01",
          "endDate": "2020-07-01"
        }
      ],
      "workExperience": [
        {
          "company": "某科技公司",
          "position": "Java开发工程师",
          "startDate": "2020-07-01",
          "endDate": "2023-01-01",
          "description": "负责后端系统开发与维护..."
        }
      ],
      "skills": [
        "Java", "Spring Boot", "MySQL", "Redis"
      ]
    },
    "status": 1,
    "isDefault": 1,
    "createTime": "2023-01-01 12:00:00",
    "updateTime": "2023-01-02 12:00:00"
  }
}
```

### 3.4 更新简历

- **URL**: `/api/resumes/{resumeId}`
- **方法**: PUT
- **描述**: 更新简历内容
- **请求参数**:

```json
{
  "title": "高级软件工程师简历",
  "templateId": 2,
  "content": {
    "basicInfo": {
      "name": "张三",
      "phone": "13800138000",
      "email": "zhangsan@example.com"
    },
    "education": [
      {
        "school": "北京大学",
        "major": "计算机科学",
        "degree": "本科",
        "startDate": "2016-09-01",
        "endDate": "2020-07-01"
      }
    ],
    "workExperience": [
      {
        "company": "某科技公司",
        "position": "高级Java开发工程师",
        "startDate": "2020-07-01",
        "endDate": "2023-01-01",
        "description": "负责系统架构设计与团队管理..."
      }
    ],
    "skills": [
      "Java", "Spring Cloud", "MySQL", "Redis", "Docker"
    ]
  }
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "更新成功",
  "data": null
}
```

### 3.5 删除简历

- **URL**: `/api/resumes/{resumeId}`
- **方法**: DELETE
- **描述**: 删除简历
- **请求参数**: 路径参数resumeId
- **响应结果**:

```json
{
  "code": 200,
  "message": "删除成功",
  "data": null
}
```

### 3.6 设置默认简历

- **URL**: `/api/resumes/{resumeId}/default`
- **方法**: PUT
- **描述**: 设置默认简历
- **请求参数**: 路径参数resumeId
- **响应结果**:

```json
{
  "code": 200,
  "message": "设置成功",
  "data": null
}
```

### 3.7 获取简历版本历史

- **URL**: `/api/resumes/{resumeId}/versions`
- **方法**: GET
- **描述**: 获取简历的版本历史
- **请求参数**: 路径参数resumeId
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": [
    {
      "id": 1,
      "resumeId": 1,
      "version": 1,
      "createTime": "2023-01-01 12:00:00"
    },
    {
      "id": 2,
      "resumeId": 1,
      "version": 2,
      "createTime": "2023-01-02 12:00:00"
    }
  ]
}
```

### 3.8 获取指定版本的简历内容

- **URL**: `/api/resumes/{resumeId}/versions/{version}`
- **方法**: GET
- **描述**: 获取指定版本的简历内容
- **请求参数**: 
  - 路径参数resumeId
  - 路径参数version
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "id": 1,
    "resumeId": 1,
    "version": 1,
    "content": {
      "basicInfo": {
        "name": "张三",
        "phone": "13800138000",
        "email": "zhangsan@example.com"
      },
      "education": [...],
      "workExperience": [...],
      "skills": [...]
    },
    "createTime": "2023-01-01 12:00:00"
  }
}
```

## 4. 模板服务 (Template Service)

### 4.1 获取模板分类列表

- **URL**: `/api/templates/categories`
- **方法**: GET
- **描述**: 获取模板分类列表
- **请求参数**: 无
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": [
    {
      "id": 1,
      "name": "简约风格",
      "sort": 1,
      "status": 1
    },
    {
      "id": 2,
      "name": "商务风格",
      "sort": 2,
      "status": 1
    },
    {
      "id": 3,
      "name": "创意风格",
      "sort": 3,
      "status": 1
    }
  ]
}
```

### 4.2 获取模板列表

- **URL**: `/api/templates`
- **方法**: GET
- **描述**: 获取模板列表，支持分页和筛选
- **请求参数**: 
  - categoryId: 分类ID (可选)
  - isFree: 是否免费 (可选，0-付费，1-免费)
  - keyword: 搜索关键词 (可选)
  - page: 页码 (默认1)
  - size: 每页大小 (默认10)
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "total": 20,
    "list": [
      {
        "id": 1,
        "categoryId": 1,
        "name": "简约风格简历模板",
        "thumbnail": "http://example.com/thumb1.jpg",
        "price": 0.00,
        "isFree": 1,
        "downloads": 1000,
        "description": "简约大气的简历模板",
        "status": 1
      },
      {
        "id": 2,
        "categoryId": 2,
        "name": "商务风格简历模板",
        "thumbnail": "http://example.com/thumb2.jpg",
        "price": 19.90,
        "isFree": 0,
        "downloads": 500,
        "description": "专业商务风格简历模板",
        "status": 1
      }
    ]
  }
}
```
## 4. 模板服务 (Template Service) - 续

### 4.3 获取模板详情

- **URL**: `/api/templates/{templateId}`
- **方法**: GET
- **描述**: 获取模板详细信息
- **请求参数**: 路径参数templateId
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "id": 1,
    "categoryId": 1,
    "name": "简约风格简历模板",
    "thumbnail": "http://example.com/thumb1.jpg",
    "filePath": "http://example.com/templates/template1.html",
    "price": 0.00,
    "isFree": 1,
    "downloads": 1000,
    "description": "简约大气的简历模板，适合各行各业求职者使用。简洁明了的布局设计，突出个人能力和经验。",
    "status": 1,
    "createTime": "2023-01-01 12:00:00",
    "updateTime": "2023-01-01 12:00:00"
  }
}
```

### 4.4 收藏模板

- **URL**: `/api/templates/{templateId}/collect`
- **方法**: POST
- **描述**: 收藏模板
- **请求参数**: 路径参数templateId
- **响应结果**:

```json
{
  "code": 200,
  "message": "收藏成功",
  "data": null
}
```

### 4.5 取消收藏

- **URL**: `/api/templates/{templateId}/collect`
- **方法**: DELETE
- **描述**: 取消收藏模板
- **请求参数**: 路径参数templateId
- **响应结果**:

```json
{
  "code": 200,
  "message": "取消成功",
  "data": null
}
```

### 4.6 获取收藏列表

- **URL**: `/api/templates/collections`
- **方法**: GET
- **描述**: 获取当前用户收藏的模板列表
- **请求参数**: 
  - page: 页码 (默认1)
  - size: 每页大小 (默认10)
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "total": 5,
    "list": [
      {
        "id": 1,
        "templateId": 1,
        "name": "简约风格简历模板",
        "thumbnail": "http://example.com/thumb1.jpg",
        "price": 0.00,
        "isFree": 1,
        "collectTime": "2023-01-10 12:00:00"
      },
      {
        "id": 2,
        "templateId": 3,
        "name": "创意风格简历模板",
        "thumbnail": "http://example.com/thumb3.jpg",
        "price": 29.90,
        "isFree": 0,
        "collectTime": "2023-01-12 12:00:00"
      }
    ]
  }
}
```

### 4.7 分享模板

- **URL**: `/api/templates/{templateId}/share`
- **方法**: GET
- **描述**: 生成模板分享链接
- **请求参数**: 路径参数templateId
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "shareUrl": "http://example.com/share/template?code=abcdef123456",
    "expireTime": "2023-01-20 12:00:00"
  }
}
```

## 5. 订单支付服务 (Order Service)

### 5.1 创建订单

- **URL**: `/api/orders`
- **方法**: POST
- **描述**: 创建模板购买订单
- **请求参数**:

```json
{
  "templateId": 2,
  "payType": 1  // 1-支付宝，2-微信
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "创建成功",
  "data": {
    "orderNo": "2023011012345678",
    "amount": 19.90,
    "payUrl": "https://pay.example.com/pay?orderNo=2023011012345678"
  }
}
```

### 5.2 获取订单列表

- **URL**: `/api/orders`
- **方法**: GET
- **描述**: 获取当前用户的订单列表
- **请求参数**: 
  - status: 订单状态 (可选，0-待支付，1-已支付，2-已取消)
  - page: 页码 (默认1)
  - size: 每页大小 (默认10)
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "total": 5,
    "list": [
      {
        "orderNo": "2023011012345678",
        "templateId": 2,
        "templateName": "商务风格简历模板",
        "amount": 19.90,
        "status": 1,
        "payType": 1,
        "payTime": "2023-01-10 12:30:00",
        "createTime": "2023-01-10 12:00:00"
      },
      {
        "orderNo": "2023011112345678",
        "templateId": 3,
        "templateName": "创意风格简历模板",
        "amount": 29.90,
        "status": 0,
        "payType": null,
        "payTime": null,
        "createTime": "2023-01-11 12:00:00"
      }
    ]
  }
}
```

### 5.3 获取订单详情

- **URL**: `/api/orders/{orderNo}`
- **方法**: GET
- **描述**: 获取订单详细信息
- **请求参数**: 路径参数orderNo
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "id": 1,
    "orderNo": "2023011012345678",
    "userId": 1,
    "templateId": 2,
    "templateName": "商务风格简历模板",
    "amount": 19.90,
    "status": 1,
    "payType": 1,
    "payTime": "2023-01-10 12:30:00",
    "createTime": "2023-01-10 12:00:00",
    "updateTime": "2023-01-10 12:30:00"
  }
}
```

### 5.4 取消订单

- **URL**: `/api/orders/{orderNo}/cancel`
- **方法**: PUT
- **描述**: 取消未支付的订单
- **请求参数**: 路径参数orderNo
- **响应结果**:

```json
{
  "code": 200,
  "message": "取消成功",
  "data": null
}
```

### 5.5 支付回调

- **URL**: `/api/orders/notify/{payType}`
- **方法**: POST
- **描述**: 支付平台异步通知接口
- **请求参数**: 
  - payType: 支付方式 (1-支付宝，2-微信)
  - 其他参数根据支付平台要求
- **响应结果**: 根据支付平台要求的格式

## 6. AI 辅助服务 (AI Service)

### 6.1 简历分析

- **URL**: `/api/ai/resume/analyze`
- **方法**: POST
- **描述**: 分析简历内容并给出评分
- **请求参数**:

```json
{
  "resumeId": 1
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "分析成功",
  "data": {
    "score": 85,
    "analysis": {
      "overall": "简历整体质量良好，但仍有改进空间。",
      "basicInfo": "基本信息完整。",
      "education": "教育经历详实，但可以添加GPA或相关荣誉。",
      "workExperience": "工作经历描述可以更加量化，突出成果。",
      "skills": "技能描述较为笼统，建议具体化。"
    }
  }
}
```
## 6. AI 辅助服务 (AI Service) - 续

### 6.2 内容优化建议

- **URL**: `/api/ai/resume/optimize`
- **方法**: POST
- **描述**: 获取简历内容优化建议
- **请求参数**:

```json
{
  "resumeId": 1,
  "section": "workExperience"  // 可选，不传则优化整个简历
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "suggestions": [
      {
        "section": "workExperience",
        "item": 0,
        "original": "负责后端系统开发与维护...",
        "suggestion": "设计并实现了高并发支付系统，日均处理交易10万+，提升系统性能30%；优化数据库查询，减少响应时间50%。"
      },
      {
        "section": "skills",
        "suggestion": "建议将技能分类展示，并标注熟练程度，如：后端开发（精通Java、Spring Boot），数据库（熟练MySQL、Redis）。"
      }
    ]
  }
}
```

### 6.3 职位匹配分析

- **URL**: `/api/ai/resume/match`
- **方法**: POST
- **描述**: 分析简历与目标职位的匹配度
- **请求参数**:

```json
{
  "resumeId": 1,
  "position": "高级Java开发工程师",
  "jobDescription": "1. 负责公司核心业务系统的设计和开发；\n2. 参与系统架构设计和技术选型；\n3. 解决系统中的技术难题和性能瓶颈；\n4. 技术要求：Java/Spring Cloud/MySQL/Redis/消息队列，5年以上经验。"
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "分析成功",
  "data": {
    "matchScore": 75,
    "analysis": "您的简历与目标职位匹配度为75%，基本满足职位要求。",
    "advantages": [
      "Java和Spring技术栈匹配度高",
      "有相关行业经验"
    ],
    "weaknesses": [
      "架构设计经验较少体现",
      "消息队列相关经验未突出"
    ],
    "suggestions": [
      "突出您在系统架构方面的经验",
      "增加消息队列相关项目经验描述",
      "强调解决复杂技术问题的案例"
    ]
  }
}
```

### 6.4 自动生成简历内容

- **URL**: `/api/ai/resume/generate`
- **方法**: POST
- **描述**: 根据用户提供的关键信息，自动生成简历内容
- **请求参数**:

```json
{
  "position": "Java开发工程师",
  "industry": "互联网",
  "workYears": 3,
  "keySkills": ["Java", "Spring Boot", "MySQL"],
  "education": {
    "school": "北京大学",
    "major": "计算机科学",
    "degree": "本科",
    "graduationYear": 2020
  }
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "生成成功",
  "data": {
    "profile": "具有3年互联网行业Java开发经验，熟练掌握Java核心技术和Spring Boot框架，具备扎实的MySQL数据库设计和优化能力。善于解决复杂技术问题，具有良好的团队协作精神。",
    "workExperience": [
      {
        "company": "推荐公司名：某科技有限公司",
        "position": "Java开发工程师",
        "responsibilities": [
          "负责公司核心业务系统的开发和维护",
          "参与微服务架构设计和实现",
          "优化SQL查询，提升系统性能",
          "解决生产环境中的技术问题"
        ]
      }
    ],
    "projects": [
      {
        "name": "推荐项目：用户中心系统",
        "description": "基于Spring Boot的用户管理系统，实现用户注册、登录、授权等功能。",
        "highlights": [
          "使用Spring Security实现权限控制",
          "引入Redis缓存提升性能",
          "设计并实现分布式会话管理"
        ]
      }
    ]
  }
}
```

## 7. 文件服务 (File Service)

### 7.1 上传文件

- **URL**: `/api/files/upload`
- **方法**: POST
- **描述**: 上传文件
- **请求参数**: 使用multipart/form-data格式
  - file: 文件对象
  - type: 文件类型 (可选，如avatar、resume等)
- **响应结果**:

```json
{
  "code": 200,
  "message": "上传成功",
  "data": {
    "fileId": 1,
    "fileName": "example.jpg",
    "filePath": "http://example.com/files/example.jpg",
    "fileSize": 102400,
    "fileType": "image/jpeg"
  }
}
```

### 7.2 下载文件

- **URL**: `/api/files/{fileId}/download`
- **方法**: GET
- **描述**: 下载文件
- **请求参数**: 路径参数fileId
- **响应结果**: 文件二进制流

### 7.3 导出简历为PDF

- **URL**: `/api/files/resume/{resumeId}/pdf`
- **方法**: GET
- **描述**: 将简历导出为PDF格式
- **请求参数**: 路径参数resumeId
- **响应结果**: PDF文件二进制流，或者：

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "downloadUrl": "http://example.com/files/resume_1.pdf"
  }
}
```

### 7.4 导出简历为Word

- **URL**: `/api/files/resume/{resumeId}/word`
- **方法**: GET
- **描述**: 将简历导出为Word格式
- **请求参数**: 路径参数resumeId
- **响应结果**: Word文件二进制流，或者：

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "downloadUrl": "http://example.com/files/resume_1.docx"
  }
}
```

### 7.5 获取文件列表

- **URL**: `/api/files`
- **方法**: GET
- **描述**: 获取当前用户的文件列表
- **请求参数**: 
  - type: 文件类型 (可选)
  - page: 页码 (默认1)
  - size: 每页大小 (默认10)
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "total": 5,
    "list": [
      {
        "id": 1,
        "originalName": "头像.jpg",
        "fileName": "avatar_1.jpg",
        "filePath": "http://example.com/files/avatar_1.jpg",
        "fileSize": 102400,
        "fileType": "image/jpeg",
        "createTime": "2023-01-01 12:00:00"
      },
      {
        "id": 2,
        "originalName": "简历.pdf",
        "fileName": "resume_1.pdf",
        "filePath": "http://example.com/files/resume_1.pdf",
        "fileSize": 204800,
        "fileType": "application/pdf",
        "createTime": "2023-01-02 12:00:00"
      }
    ]
  }
}
```

### 7.6 删除文件

- **URL**: `/api/files/{fileId}`
- **方法**: DELETE
- **描述**: 删除指定文件
- **请求参数**: 路径参数fileId
- **响应结果**:

```json
{
  "code": 200,
  "message": "删除成功",
  "data": null
}
```

## 8. 通知服务 (Notification Service)

### 8.1 获取通知列表

- **URL**: `/api/notifications`
- **方法**: GET
- **描述**: 获取当前用户的通知列表
- **请求参数**: 
  - isRead: 是否已读 (可选，0-未读，1-已读)
  - type: 通知类型 (可选，1-系统通知，2-订单通知，3-其他)
  - page: 页码 (默认1)
  - size: 每页大小 (默认10)
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "total": 5,
    "list": [
      {
        "id": 1,
        "title": "订单支付成功",
        "content": "您的订单2023011012345678已支付成功",
        "type": 2,
        "isRead": 0,
        "createTime": "2023-01-10 12:30:00"
      },
      {
        "id": 2,
        "title": "系统公告",
        "content": "系统将于2023年1月15日进行维护升级",
        "type": 1,
        "isRead": 1,
        "createTime": "2023-01-11 12:00:00"
      }
    ]
  }
}
```
## 8. 通知服务 (Notification Service) - 续

### 8.2 获取通知详情

- **URL**: `/api/notifications/{notificationId}`
- **方法**: GET
- **描述**: 获取通知详情
- **请求参数**: 路径参数notificationId
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "id": 1,
    "userId": 1,
    "title": "订单支付成功",
    "content": "您的订单2023011012345678已支付成功，您现在可以使用该模板创建简历了。",
    "type": 2,
    "isRead": 0,
    "createTime": "2023-01-10 12:30:00"
  }
}
```

### 8.3 标记通知为已读

- **URL**: `/api/notifications/{notificationId}/read`
- **方法**: PUT
- **描述**: 标记指定通知为已读
- **请求参数**: 路径参数notificationId
- **响应结果**:

```json
{
  "code": 200,
  "message": "标记成功",
  "data": null
}
```

### 8.4 标记所有通知为已读

- **URL**: `/api/notifications/read-all`
- **方法**: PUT
- **描述**: 标记所有通知为已读
- **请求参数**: 无
- **响应结果**:

```json
{
  "code": 200,
  "message": "标记成功",
  "data": null
}
```

### 8.5 删除通知

- **URL**: `/api/notifications/{notificationId}`
- **方法**: DELETE
- **描述**: 删除指定通知
- **请求参数**: 路径参数notificationId
- **响应结果**:

```json
{
  "code": 200,
  "message": "删除成功",
  "data": null
}
```

### 8.6 获取未读通知数量

- **URL**: `/api/notifications/unread-count`
- **方法**: GET
- **描述**: 获取未读通知数量
- **请求参数**: 无
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "count": 3
  }
}
```

### 8.7 发送邮件通知

- **URL**: `/api/notifications/email`
- **方法**: POST
- **描述**: 发送邮件通知（仅管理员可用）
- **请求参数**:

```json
{
  "userIds": [1, 2, 3],  // 接收用户ID列表，为空则发送给所有用户
  "subject": "系统升级通知",
  "content": "尊敬的用户，系统将于2023年1月15日进行维护升级，届时系统将暂停服务2小时。",
  "saveToSystem": true   // 是否同时保存到系统通知
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "发送成功",
  "data": {
    "successCount": 3,
    "failCount": 0
  }
}
```

## 9. 网关API (Gateway API)

### 9.1 获取系统服务状态

- **URL**: `/api/status`
- **方法**: GET
- **描述**: 获取各微服务的运行状态
- **请求参数**: 无
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "services": [
      {
        "name": "user-service",
        "status": "UP",
        "instances": 2
      },
      {
        "name": "auth-service",
        "status": "UP",
        "instances": 2
      },
      {
        "name": "resume-service",
        "status": "UP",
        "instances": 2
      },
      {
        "name": "template-service",
        "status": "UP",
        "instances": 2
      },
      {
        "name": "order-service",
        "status": "UP",
        "instances": 2
      },
      {
        "name": "ai-service",
        "status": "UP",
        "instances": 1
      },
      {
        "name": "file-service",
        "status": "UP",
        "instances": 2
      },
      {
        "name": "notification-service",
        "status": "UP",
        "instances": 2
      }
    ]
  }
}
```

### 9.2 刷新配置

- **URL**: `/api/config/refresh`
- **方法**: POST
- **描述**: 刷新指定服务的配置（仅管理员可用）
- **请求参数**:

```json
{
  "service": "user-service"  // 服务名，不传则刷新所有服务
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "刷新成功",
  "data": null
}
```

## 10. 管理员API (Admin API)

### 10.1 用户管理

#### 10.1.1 获取用户列表

- **URL**: `/api/admin/users`
- **方法**: GET
- **描述**: 获取用户列表
- **请求参数**: 
  - username: 用户名关键词 (可选)
  - email: 邮箱关键词 (可选)
  - role: 角色 (可选，0-普通用户，1-VIP用户，2-管理员)
  - status: 状态 (可选，0-禁用，1-正常)
  - page: 页码 (默认1)
  - size: 每页大小 (默认10)
- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {
    "total": 100,
    "list": [
      {
        "id": 1,
        "username": "zhangsan",
        "email": "zhangsan@example.com",
        "phone": "13800138000",
        "role": 0,
        "status": 1,
        "createTime": "2023-01-01 12:00:00"
      },
      {
        "id": 2,
        "username": "lisi",
        "email": "lisi@example.com",
        "phone": "13800138001",
        "role": 1,
        "status": 1,
        "createTime": "2023-01-02 12:00:00"
      }
    ]
  }
}
```

#### 10.1.2 禁用/启用用户

- **URL**: `/api/admin/users/{userId}/status`
- **方法**: PUT
- **描述**: 禁用或启用用户
- **请求参数**:

```json
{
  "status": 0  // 0-禁用，1-启用
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": null
}
```

#### 10.1.3 修改用户角色

- **URL**: `/api/admin/users/{userId}/role`
- **方法**: PUT
- **描述**: 修改用户角色
- **请求参数**:

```json
{
  "role": 1  // 0-普通用户，1-VIP用户，2-管理员
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": null
}
```

### 10.2 模板管理

#### 10.2.1 创建模板分类

- **URL**: `/api/admin/template-categories`
- **方法**: POST
- **描述**: 创建模板分类
- **请求参数**:

```json
{
  "name": "科技风格",
  "sort": 4
}
```

- **响应结果**:

```json
{
  "code": 200,
  "message": "创建成功",
  "data": {
    "id": 4
  }
}


```